Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    LPAR
    STAR
    SLASH
    LESS
    SLASHEQUAL
    NUMBER
    RPAR
    CIRCUMFLEX
    NOTEQUAL
    VBAR
    BACKQUOTE
    DOUBLESTAR
    ENDMARKER
    MINUS
    DOT
    RBRACE
    STAREQUAL
    GREATEREQUAL
    MINEQUAL
    LEFTSHIFTEQUAL
    SEMI
    CIRCUMFLEXEQUAL
    DOUBLESLASHEQUAL
    COLON
    PERCENTEQUAL
    TILDE
    PLUS
    ERRORTOKEN
    RSQB
    EQEQUAL
    COMMENT
    AMPEREQUAL
    RIGHTSHIFT
    PERCENT
    DOUBLESLASH
    DOUBLESTAREQUAL
    EQUAL
    PLUSEQUAL
    AT
    AMPER
    LESSEQUAL
    NL
    LSQB
    RIGHTSHIFTEQUAL
    NT_OFFSET
    LBRACE
    GREATER
    VBAREQUAL
    LEFTSHIFT
    COMMA

Grammar

Rule 0     S' -> tag
Rule 1     tag -> NAME attrs OP suite
Rule 2     attrs -> attr
Rule 3     attrs -> <empty>
Rule 4     attr -> NAME OP STRING
Rule 5     suite -> NEWLINE INDENT stmts DEDENT
Rule 6     stmt -> STRING
Rule 7     stmt -> tag
Rule 8     stmts -> stmt

Terminals, with rules where they appear

AMPER                : 
AMPEREQUAL           : 
AT                   : 
BACKQUOTE            : 
CIRCUMFLEX           : 
CIRCUMFLEXEQUAL      : 
COLON                : 
COMMA                : 
COMMENT              : 
DEDENT               : 5
DOT                  : 
DOUBLESLASH          : 
DOUBLESLASHEQUAL     : 
DOUBLESTAR           : 
DOUBLESTAREQUAL      : 
ENDMARKER            : 
EQEQUAL              : 
EQUAL                : 
ERRORTOKEN           : 
GREATER              : 
GREATEREQUAL         : 
INDENT               : 5
LBRACE               : 
LEFTSHIFT            : 
LEFTSHIFTEQUAL       : 
LESS                 : 
LESSEQUAL            : 
LPAR                 : 
LSQB                 : 
MINEQUAL             : 
MINUS                : 
NAME                 : 1 4
NEWLINE              : 5
NL                   : 
NOTEQUAL             : 
NT_OFFSET            : 
NUMBER               : 
OP                   : 1 4
PERCENT              : 
PERCENTEQUAL         : 
PLUS                 : 
PLUSEQUAL            : 
RBRACE               : 
RIGHTSHIFT           : 
RIGHTSHIFTEQUAL      : 
RPAR                 : 
RSQB                 : 
SEMI                 : 
SLASH                : 
SLASHEQUAL           : 
STAR                 : 
STAREQUAL            : 
STRING               : 4 6
TILDE                : 
VBAR                 : 
VBAREQUAL            : 
error                : 

Nonterminals, with rules where they appear

attr                 : 2
attrs                : 1
stmt                 : 8
stmts                : 5
suite                : 1
tag                  : 7 0

Parsing method: LALR

state 0

    (0) S' -> . tag
    (1) tag -> . NAME attrs OP suite

    NAME            shift and go to state 2

    tag                            shift and go to state 1

state 1

    (0) S' -> tag .



state 2

    (1) tag -> NAME . attrs OP suite
    (2) attrs -> . attr
    (3) attrs -> .
    (4) attr -> . NAME OP STRING

    OP              reduce using rule 3 (attrs -> .)
    NAME            shift and go to state 3

    attrs                          shift and go to state 4
    attr                           shift and go to state 5

state 3

    (4) attr -> NAME . OP STRING

    OP              shift and go to state 6


state 4

    (1) tag -> NAME attrs . OP suite

    OP              shift and go to state 7


state 5

    (2) attrs -> attr .

    OP              reduce using rule 2 (attrs -> attr .)


state 6

    (4) attr -> NAME OP . STRING

    STRING          shift and go to state 8


state 7

    (1) tag -> NAME attrs OP . suite
    (5) suite -> . NEWLINE INDENT stmts DEDENT

    NEWLINE         shift and go to state 9

    suite                          shift and go to state 10

state 8

    (4) attr -> NAME OP STRING .

    OP              reduce using rule 4 (attr -> NAME OP STRING .)


state 9

    (5) suite -> NEWLINE . INDENT stmts DEDENT

    INDENT          shift and go to state 11


state 10

    (1) tag -> NAME attrs OP suite .

    $end            reduce using rule 1 (tag -> NAME attrs OP suite .)
    DEDENT          reduce using rule 1 (tag -> NAME attrs OP suite .)


state 11

    (5) suite -> NEWLINE INDENT . stmts DEDENT
    (8) stmts -> . stmt
    (6) stmt -> . STRING
    (7) stmt -> . tag
    (1) tag -> . NAME attrs OP suite

    STRING          shift and go to state 12
    NAME            shift and go to state 2

    stmts                          shift and go to state 13
    tag                            shift and go to state 15
    stmt                           shift and go to state 14

state 12

    (6) stmt -> STRING .

    DEDENT          reduce using rule 6 (stmt -> STRING .)


state 13

    (5) suite -> NEWLINE INDENT stmts . DEDENT

    DEDENT          shift and go to state 16


state 14

    (8) stmts -> stmt .

    DEDENT          reduce using rule 8 (stmts -> stmt .)


state 15

    (7) stmt -> tag .

    DEDENT          reduce using rule 7 (stmt -> tag .)


state 16

    (5) suite -> NEWLINE INDENT stmts DEDENT .

    $end            reduce using rule 5 (suite -> NEWLINE INDENT stmts DEDENT .)
    DEDENT          reduce using rule 5 (suite -> NEWLINE INDENT stmts DEDENT .)

